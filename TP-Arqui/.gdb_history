c
q
src-prof 
b test_prio
c
c
q
src-prof 
b test_prio
c
b read_pipe
c
n
b timer_handler 
c
n
c
n
c
q
src-prof 
b test_prio
c
b write_pipe
c
c
q
src-prof 
b test_prio
c
b write_pipe 
b read_pipe 
c
c
c
c
c
c
c
c
c
c
c
c
c
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
c
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
c
q
src-prof 
b test_processes_fn 
c
n
q
src-prof 
b test_processes_fn 
c
b write_pipe 
b read_pipe 
c
c
c
c
n
n
n
n
n
n
n
c
q
src-prof 
b test_processes_fn 
c
b write_pipe 
c
n
print pipe->read_waiting 
c
n
print pipe->to_read_count
n
b timer_handler 
c
n
n
n
n
s
n
n
print running_pcb->name
n
q
src-prof 
b run_shell
c
n
s
b write_pipe 
n
c
n
print pipe->mutex->count
n
q
src-prof 
c
b cat_fn 
c
cat
b keyboard_handler 
c
n
c
n
print /x read
n
n
q
src-prof 
c
b keyboard_handler 
c
n
c
n
n
b getchar
c
q
src-prof 
b cat_fn
c
n
n
q
sr
c
b keyboard_handler 
c
n
c
n
n
n
print ascii
n
n
n
n
n
n
n
n
n
print pid
c
c
n
print pid
print getpid(my_pm);

print getpid(my_pm)

q
src-prof 
c
b keyboard_handler 
c
n
c
n
c
c
n
print my_pm->scheduler->list->size
quit
src-prof 
q
sr
c
b keyboard_handler 
c
n
n
n
n
print ascii
q
src-prof 
b waitpid
c
n
n
n
print pm->process_table[ppid].pcb->name
c
n
print pm->process_table[ppid].pcb->name
print pm->process_table[pid].pcb->parent_pid
print pm->process_table[pid].pcb->status == ZOMBIE
print pm->process_table[pid].pcb->status 
print pm->process_table[pm->process_table[pid].pcb->parent_pid].pcb->status
print pm->process_table[pm->process_table[pid].pcb->parent_pid].pcb->name
c
n
n
q
src-prof 
b get_command 
c
n
q
src-prof 
b nice
b get_command
c
q
