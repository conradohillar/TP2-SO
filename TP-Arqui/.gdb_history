print argv[0]
print argv[1]
print argv[2]
n
n
n
s
s
s
s
s
print argv_copy[0]
n
n
print argv_copy[1]
n
s
s
s
s
print argv_copy[2]
print argv_copy[1]
print argv_copy[0]
c
n
print argv_copy[1]n
n
print argv_copy[0]
s
s
print argv_copy[0]
n
print argv_copy[1]
n
print argv_copy[2]
s
n
delete 
b test_sem_synchro_fn 
c
c
quit
b test_semaphores 
c
c
b create_process
c
src-prof 
n
n
print argv_copy[0]
n
n
print argv[i]
n
print argv_copy[1]
n
c
n
n
n
s
s
s
s
s
quit
src-prof 
b test_semaphores 
c
b test_sem_synchro_fn 
c
c
b create_process
c
n
n
quit
c
b test_semaphores
c
s
n
s
s
s
display *argv_synchro
display *argv_synchro[1]
display *argv_synchro[2]
display argv_synchro[2]
display argv_*(synchro[0])
display *(argv_synchro[0])
display *(argv_synchro[0]+1)
display *(argv_synchro[1])
display *(argv_synchro[1]+1)
display *(argv_synchro[2])
display (argv_synchro[2])
display *(argv_asynchro[0])
display *(argv_asynchro[0]+1)
display *(argv_asynchro[1])
display *(argv_asynchro[1]+1)
display (argv_asynchro[2])
s
s
asm-prof 
s
q
b test_semaphores
c
c
s
n
s
s
n
s
q
b test_semaphores
c
c
b test_sem_synchro_fn
c
s
s
s
s
n
s
n
n
n
n
n
n
n
n
n
n
n
n
n
n
s
n
s
b waitpid
s
s
s
n
s
s
s
s
s
s
display pm->process_table[ppid].pcb->waiting_pid
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
q
b test_semaphores
c
c
b test_sem_synchro_fn
c
s
s
s
s
n
s
n
n
n
n
n
n
n
n
n
n
n
n
s
s
b waitpid
s
s
s
n
s
s
s
s
s
s
display pm->process_table[ppid].pcb->waiting_pid
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
n
s
s
n
n
n
n
s
s
n
q
